type Classroom {
    id: ID!
    email: String!
    name: String!
    desks: [Desk!]!
    students: [String!]!
}

type Desk {
    id: ID!
    x: Int!
    y: Int!
    orientation: Int!
}

input DeskInput {
    x: Int!
    y: Int!
    orientation: Int!
}

type Query {
    getClassroomById(id:ID!): Classroom!
    getClassroomByEmail(email:String!): Classroom!
    isEmailAlreadyUsed(email:String!): Boolean!
}

type Mutation {
    createClassroom(email:String!, name: String!, desks:[DeskInput!]!, students: [String!]!): Classroom!
    editClassroom(id: ID!, name: String, email: String, desks: [DeskInput!], students: [String!]): Classroom!
    shuffleDesks(classId: ID!):Classroom!
    sendClassroomIdByEmail(email: String!): EmailResponse!
    requestClassroomDeletion (id: String!): TokenGenerationResult!
    deleteClassroom(token: String!): ProcessResult!
}